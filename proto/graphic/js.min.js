"use strict";
function setFeedback(t,e){switch(t){case ProbMark.NONE:break;case ProbMark.CORRECT:txtFeedback.classList.remove("alert-warning"),txtFeedback.classList.add("alert-success"),txtFeedback.innerHTML=e;break;case ProbMark.INCORRECT:txtFeedback.classList.remove("alert-success"),txtFeedback.classList.add("alert-warning"),txtFeedback.innerHTML=e}}
function checkCoinValue(t,e){if(t=t.trim(),0===t.length)return!1;if(!t.match(/^[\d]{1,2}$/))return!1;var n=parseInt(t);return!(n>e)}function coinValueChange(t){var e=this.value,n=this.getAttribute("id"),a=0;null!==n&&(a=maxValMap.get(n)),checkCoinValue(e,a)?(this.classList.remove("border-danger"),btnRight.disabled=!1):(this.classList.add("border-danger"),btnRight.disabled=!0)}
function setButtons(t,e,n){btnLeft.innerText=t,btnLeft.disabled=e,btnRight.innerText=n,btnRight.disabled=!1}
function leftButtonClick(t){var e=btnLeft.innerText;btnLeft.disabled;"Clear"===e?clearCoins():"Solution"===e?showSolution():fatalError("leftButtonClick: invalid button value: ".concat(e))}function rightButtonClick(t){var e=btnRight.innerText;btnRight.disabled;"Check"===e?markProblem():"Next"===e?nextProblem():"Retry"===e?(setButtons("Clear",!1,"Check"),setFeedback(ProbMark.NONE,""),showProblem()):fatalError("rightButtonClick: invalid button value: ".concat(e))}
function clearCoins(){txtQ.value="0",txtQ.classList.remove("border-danger"),txtN.value="0",txtN.classList.remove("border-danger"),txtD.value="0",txtD.classList.remove("border-danger"),txtP.value="0",txtP.classList.remove("border-danger")}function getCoinValues(){var t=document.querySelectorAll(".coinClass"),e=0,n=0,a=0,r=0,o={quarters:-1,dimes:-1,nickels:-1,pennies:-1};return t.forEach(function(t){var i=t,l=i.getAttribute("id"),s=i.value;if(!checkCoinValue(s,maxValMap.get(l)))return o;"txtQ"===l?e=parseInt(s):"txtD"===l?n=parseInt(s):"txtN"===l?a=parseInt(s):"txtP"===l&&(r=parseInt(s)),console.log("id: ".concat(l," valStr: ").concat(s))}),{quarters:e,dimes:n,nickels:a,pennies:r}}function logProbState(t){console.log("probState: ".concat(ProbState[t]))}function nextProblem(){probState=ProbState.NEXT,logProbState(probState),tryCount=0,probCount++,amount=Math.floor(99*Math.random())+1,txtAmount.innerHTML="Amount ".concat(amount,"&cent;"),setFeedback(ProbMark.NONE,""),clearCoins(),setButtons("Clear",!1,"Check"),showProblem()}function showProblem(){probState=ProbState.SHOW,logProbState(probState)}function retryProblem(){btnLeft.innerText="Solution",btnLeft.disabled=!1,btnRight.innerText="Retry",btnRight.disabled=!1,tryCount++,showProblem()}function coinsSumMatch(t,e){var n=25*e.quarters+10*e.dimes+5*e.nickels+e.pennies;return t===n}function coinsCountMatch(t,e){return t.quarters===e.quarters&&t.dimes===e.dimes&&t.nickels===e.nickels&&t.pennies===e.pennies}function getSolution(t){var e=t,n=Math.floor(e/25);e=Math.floor(e%25);var a=Math.floor(e/10);e=Math.floor(e%10);var r=Math.floor(e/5),o=Math.floor(e%5);return{quarters:n,dimes:a,nickels:r,pennies:o}}function markProblem(){probState=ProbState.MARK,logProbState(probState);var t=getCoinValues(),e=getSolution(amount);if(coinsSumMatch(amount,t)&&coinsCountMatch(t,e))probState=ProbState.CORRECT,logProbState(probState),setFeedback(ProbMark.CORRECT,"Correct!"),setButtons("Clear",!0,"Next"),testProblemCount()||alert("Game over!");else{probState=ProbState.INCORRECT,logProbState(probState);var n="";coinsSumMatch(amount,t)?coinsCountMatch(t,e)||(n="Number of coins not minimum."):n="Coins don't sum to Amount.",setFeedback(ProbMark.INCORRECT,n),retryProblem(),testRetryCount()||(setFeedback(ProbMark.INCORRECT,n+" Sorry, got to move on."),setButtons("Clear",!0,"Next"),testProblemCount()||alert("Game Over"))}}function showSolution(){probState=ProbState.SOLUTION,logProbState(probState);var t=getSolution(amount),e="Solution [Q: ".concat(t.quarters,", D: ").concat(t.dimes,",\n N: ").concat(t.nickels,", P: ").concat(t.pennies,"]");setFeedback(ProbMark.INCORRECT,e),setButtons("Clear",!0,"Next")}function testProblemCount(){return probCount<gameConfig.probMax}function testRetryCount(){return tryCount<gameConfig.tryMax}function fatalError(t){console.log(t)}var GameState,gameState,ProbState,ProbMark;(function(t){t[t.INIT=0]="INIT",t[t.START=1]="START",t[t.SCORE=2]="SCORE",t[t.END=3]="END"})(GameState||(GameState={})),function(t){t[t.NEXT=0]="NEXT",t[t.SHOW=1]="SHOW",t[t.MARK=2]="MARK",t[t.INCORRECT=3]="INCORRECT",t[t.CORRECT=4]="CORRECT",t[t.SOLUTION=5]="SOLUTION"}(ProbState||(ProbState={})),function(t){t[t.NONE=0]="NONE",t[t.CORRECT=1]="CORRECT",t[t.INCORRECT=2]="INCORRECT"}(ProbMark||(ProbMark={}));var probState,gameConfig={title:"Minimum Coins",description:"You have an unlimited number of quarters, dimes, nickels, and pennies. Make change for the amount below using the fewest (minimum) coins.",probMax:4,tryMax:3},maxQuarters=Number.MAX_SAFE_INTEGER,maxDimes=Number.MAX_SAFE_INTEGER,maxNickels=Number.MAX_SAFE_INTEGER,maxPennies=Number.MAX_SAFE_INTEGER,amount=0,quarters=0,dimes=0,nickels=0,pennies=0,probCount=0,tryCount=0,txtAmount=document.getElementById("txtAmount"),txtQ=document.getElementById("txtQ"),txtD=document.getElementById("txtD"),txtN=document.getElementById("txtN"),txtP=document.getElementById("txtP"),btnLeft=document.getElementById("btnLeft"),btnRight=document.getElementById("btnRight"),txtFeedback=document.getElementById("txtFeedback");null==txtQ||txtQ.addEventListener("change",coinValueChange),null==txtD||txtD.addEventListener("change",coinValueChange),null==txtN||txtN.addEventListener("change",coinValueChange),null==txtP||txtP.addEventListener("change",coinValueChange),null==txtQ||txtQ.addEventListener("focus",function(){return txtQ.select()}),null==txtD||txtD.addEventListener("focus",function(){return txtD.select()}),null==txtN||txtN.addEventListener("focus",function(){return txtN.select()}),null==txtP||txtP.addEventListener("focus",function(){return txtP.select()}),null==txtQ||txtQ.addEventListener("blur",coinValueChange),null==txtD||txtD.addEventListener("blur",coinValueChange),null==txtN||txtN.addEventListener("blur",coinValueChange),null==txtP||txtP.addEventListener("blur",coinValueChange),null==btnLeft||btnLeft.addEventListener("click",leftButtonClick),null==btnRight||btnRight.addEventListener("click",rightButtonClick),nextProblem();var maxValMap=new Map;maxValMap.set("txtQ",maxQuarters),maxValMap.set("txtD",maxDimes),maxValMap.set("txtN",maxNickels),maxValMap.set("txtP",maxPennies);